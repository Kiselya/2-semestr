include <conio.h>
#include <stdlib.h>
#include <memory.h> // управляем памятью так сказать 

struct scan_info {
	char model[25];
	int price; 
	double x_size; 
	double y__size; 
	int optr; 
	int grey; 
};

const int min_records = 6; 

void PrintArray (scan_info* si, int count) 
{
	for (int i=0; i<count; i++)
		printf ("\n%i. %s price: %i grey: %i", i+1, si[i].model, si[i].price, si[i].grey);
}

void PrintFromFile (char* fname) 
{
	FILE* f = fopen (fname, "rb"); 
	if (!f) { 
		printf ("Error");
		return;
	}
	short count; 
	int k = fread (&count, sizeof(short), 1, f);
	if (k!=1) { 
		printf ("Error");
		return;
	}
	scan_info* si = new scan_info[count]; 
	k = fread (si, sizeof(scan_info), count, f);
	if (k!=count) {
		printf ("Error");
		return;
	}
	for (int i=0; i<count; i++) 
		printf ("\n%i. %s price: %i grey: %i", i+1, si[i].model, si[i].price, si[i].grey);
	fclose (f);
}


void OptimizeFile (char* fname) 
{ 
	FILE* f = fopen (fname, "r+b"); 
	if (!f) { 
		printf ("Error");
		return;
	}
	short count; 
	int k = fread (&count, sizeof(short), 1, f);
	if (k!=1) { 
		printf ("Error");
		return;
	}
	scan_info* si = new scan_info[count];
	k = fread (si, sizeof(scan_info), count, f); 
	if (k!=count) {
		printf ("Error");
		return;
	}

	PrintArray (si, count); 
	fseek (f, sizeof(short), SEEK_SET); 
 
	short newcount = 0; 
	scan_info nul; 
	memset (&nul, 0, sizeof(nul)); 

	for (int i=0; i<count; i++) { 
		if (memcmp (&nul, &si[i], sizeof(scan_info))!=0) { 
			k = fwrite (&si[i], sizeof(scan_info), 1, f); 
			if (k!=1)  {
				printf ("Error");
				return;
			}
			newcount++; 
		}
	}

	fseek (f, 0, SEEK_SET); 
	k = fwrite (&newcount, sizeof(short), 1, f); 
	if (k!=1)  {
		printf ("Error");
		return;
	}

	fclose (f); 

	printf ("\nFile after optimization: \n"); 
  PrintFromFile (fname);
}

void CreateFile (char* fname) 
{
	short n = 0; 
	int pos;
	scan_info si, nul;
	memset (&nul, 0, sizeof(nul)); 
	FILE* f = fopen (fname, "wb"); 
	if (!f) {
		printf ("Error");
		return;
	}
	int k = fwrite (&n, sizeof(short), 1, f); 
	if (k!=1) {
		printf ("Error");
		return;
	}
	char c = 'y'; 
	while (c=='y') { 
		printf ("\nInput new record.\nInput model:\n");
		scanf ("%s", &si.model);
		printf ("\nInput price:\n");
		scanf ("%d", &si.price);
		printf ("\nInput horizontal size:\n");
		scanf ("%f", &si.x_size);
		printf ("\nInput vertical size:\n");
		scanf ("%f", &si.y__size);
		printf ("\nInput optical resolution:\n");
		scanf ("%d", &si.optr);
		printf ("\nInput shade of grey:\n");
		scanf ("%d", &si.grey);
		printf ("\nInput position to save (-1 for write to the end):\n");
		scanf ("%d", &pos);

		n++; 
		if (pos<0) pos = n; 
		if (pos>n) { 
			fseek (f, (n-1)*sizeof(si)+sizeof(short), SEEK_SET); 
			while (pos>n) { 
				fwrite (&nul, sizeof(nul), 1, f);
				n++;
			}
		} else if (pos<n) { 
			n--; 
			fseek (f, (pos-1)*sizeof(si)+sizeof(short), SEEK_SET); 
		} else 
			fseek (f, (n-1)*sizeof(si)+sizeof(short), SEEK_SET);
		

		k = fwrite (&si, sizeof(si), 1, f); 
		if (k!=1) {
			printf ("Error");
			return;
		}
		if (n>=min_records) { 
			printf ("\nPress \'y\', if you want to continue, or any other key, if you don\'t\n");
			c = getch(); 
		}
	}

	fseek (f, 0, SEEK_SET); 
	k = fwrite (&n, sizeof(short), 1, f); 
	if (k!=1) {
		printf ("Error");
		return;
	}
	fclose (f); 
}

int _tmain(int argc, _TCHAR* argv[])
{ 
	CreateFile ("c:\\scans"); 
	OptimizeFile ("c:\\scans"); 
	getch(); 
	return 0;
}
