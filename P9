#include <iostream>
#include <string>
#include <map> // помещаем сразу два значения 
 
class Book {
 public:
  Book(const std::string &udcCode, const std::string &author,
    const std::string &name, int year) : udcCode(udcCode),
    author(author), name(name), year(year) {}
  const std::string &getUdcCode() const { return udcCode; }
  const std::string &getAuthor() const { return author; }
  const std::string &getName() const { return name; }
  int getYear() const { return year; }
 private:
  std::string udcCode;
  std::string author;
  std::string name;
  int year;
};
 
bool operator==(const Book &a, const Book &b) {
  return (&a == &b) || 
    (a.getUdcCode() == b.getUdcCode() &&
    a.getAuthor() == b.getAuthor() &&
    a.getYear() == b.getYear());
};
 
bool operator!=(const Book &a, const Book &b) {
  return !(a == b);
};
 
bool operator<(const Book &a, const Book &b) {
  if (a.getUdcCode() == b.getUdcCode()) {
    if (a.getAuthor() == b.getAuthor()) {
      if (a.getName() == b.getName()) {
        return a.getYear() < b.getYear();
      } else {
        return a.getName() < b.getName();
      }
    } else {
      return a.getAuthor() < b.getAuthor();
    }
  } else {
    return a.getUdcCode() < b.getUdcCode();
  }
};
 
std::ostream &operator<<(std::ostream &stream, const Book &book) {
  return stream << "Book{" <<
    "udcCode=\"" << book.getUdcCode() << "\"," <<
    "author=\"" << book.getAuthor() << "\"," <<
    "name=\"" << book.getName() << "\"," <<
    "year=" << book.getYear() << "}";
};
 
class Library {
 public:
  typedef std::map<Book, int> StorageType;
  typedef StorageType::iterator Iterator;
  typedef StorageType::const_iterator ConstIterator;
  Library() : books() {}
  void add(const Book &book, int count) {
    books[book] = count;
  }
  int get(const Book &book, int count) {
    if (books[book] < count) {
      count = books[book];
    }
    books[book] -= count;
    return count;
  }
  size_t size() const { return books.size(); }
  ConstIterator begin() const { return books.begin(); }
  Iterator begin() { return books.begin(); }
  ConstIterator end() const { return books.end(); }
  Iterator end() { return books.end(); }
 private:
  StorageType books;
};
 
std::ostream &operator<<(std::ostream &stream, const Library &library) {
  stream << "Library{";
  for (Library::ConstIterator i = library.begin(); i != library.end(); ++i) {
    stream << "{book=" << i->first << ",count=" << i->second << "},";
  }
  return stream << "}";
}
 
int main(int argc, char **argv) {
  Library library;
  
  library.add(Book("25-50", "Parapa", "Rapapa", 2001), 2);
  library.add(Book("25-50", "Parapa", "Rapapapa", 1987), 1);
  library.add(Book("100.1.01", "Rarara", "Rururu", 2002), 5);
  
  std::cout << library << std::endl;
  
  Book aBook = Book("25-50", "Parapa", "Rapapapa", 1987);
  std::cout << "Requesting 2x" << aBook << std::endl;
  int count = library.get(aBook, 2);
  if (count > 0) {
    std::cout << "Was able to get " << count << " book(s) of 2 requested." << std::endl;
  } else {
    std::cout << "Was not able to get a book." << std::endl;
  }
  
  std::cout << "Returning " << count << "x" << aBook << std::endl;
  library.add(aBook, count);
  return 0;
};
